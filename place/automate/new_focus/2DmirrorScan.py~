'''
Master script to run x-y scanning laser-ultrasound experiment using PLACE automation.

1. Instruments are initialized
2. Header is created
3. Scan area is calibrated
4. Scan: data is acquired, displayed, and appended to stream file for each stage position
  - Data is saved to an HDF5 file (e.g. filename.h5) in the same folder as Scan.py:
5. Connection to instruments are closed

-------------------------
Command line options:
-------------------------

-r --sampleRate=
        define the sample rate.  Supply an integer with
        suffix, e.g. 100K for 10e5 samples per second or 1M for 10e6 samples per second (Max of 125M).
        options: 1K, 2K, 5K, 10K, 20K, 50K, 100K, 100K, 500K, 1M, 2M, 5M, 10M, 20M, 25M, 50M, 100M, 125M
        Example: -r 25M for 25 megasamples/second
        Default: 100 kSamples/second
-t --timeDuration=
        define total time to record each trace in microseconds. 
        Example: -t 100 for 100 us.
        Default: 100 us.
        *NOTE: number of samples will be rounded to next power of two to avoid scrambling data
-c --channel=
        define the channel that will be used to acquire data.
        Example: -c A for channel A. 
        Default: Channel A
-a --averagedRecords=
        define the number of records that shall be averaged. 
        Example: -a 100 to average 100 records
        Default: 64 averages
-w --waitTime=
       time to stall after each stage movement.
       Example: -w 2 to stall 2 seconds
       Default: 0
-v --receiver=
       define which receiver to use. polytec, gclad, paldv
       Example: -v gclad
       Default: polytec
-z --sigLevel=
       define suitable polytec signal level (range ~0 to 1.1)
       Example: -z 0.50 for signal level 0.5
       Default: 0.90
-u --vibChannel=
       define oscilloscope card channel for polytec signal level     
       Example: -c B for channel B. 
       Default: null
-l --trigLevel=
        trigger level in volts.  
        Example: -l 2 for a trigger level of +2 V
        Default: 1V
-q, --trigRange=
        input range for external trigger. 
        Example: -q 4 for +/- 4V trigger range.
        Default: 4
-y --channelRange=
        input range of acquisition channel. 
        options: 100_MV, 200_MV, 400_MV, 1_V, 2_V, 4_V
        Example: -v 4 for a input range of +/- 4 V
        Default: +/- 2V
-p --coupling=
        AC for AC coupling, DC for DC coupling.  
        Example: -p AC. 
        Default: DC coupling.
-o --ohms=
        set impedance of oscilloscope card
        50 for 50 ohm impedance, 1 for 1Mohm impedance
        Example: -o 50
        Default: 50
-n --fileName=
        define the base file name to save data to. 
        Example: -n Scan1 for image data to be saved to Scan1.h5 
        Default: TestScan.h5
-d --decoder=
        define decoder for Polytec vibrometer. Possible decoders are VD-08, VD-09, DD-300 (best for ultrasonic applications), and DD-900.  
        Example: -d 'DD-300'
        Default: DD-300 decoder
-g --range= 
        define range of decoder of Polytec vibrometer.  Specify both the value and unit length for the appropriate 
        Example: -g 5mm specifies a range of 5 mm/s/V. 
        Default: 5 mm/s/V
-k --map=
        define colormap to use during scan to display image.  
        Example: --map='jet' to use jet colormap
        Default: 'gray'
-e --energy= 
        specify the energy of the source used (in mJ).  
        Example: -e 100 specifies a 100 mJ source energy
        Default: 0 mJ
        *NOTE: the source laser energy must be manaually set on the laser power supply.  This value is for documentation purposes, only.

-i --calibrationType=
        Define which calibration method to use. Options available are 2Corner (Center, Auto, 2CornerAlt)
        Example -i 2Corner

-s --arraySize=
        Set the size of scan array. Enter one value for square, are two values for rectangle. 
        Example: -s 100,150 creates scan array 100x150
        Example: --arraySize=50 creates scan array 50x50
        Default: ___

-b --resolution=
        Set spacing size between points on array. 
        Example: -b 50 specifies 50 motor steps between points on array
        

-m --comments=
        add any extra comments to be added to the trace headers.  
        Example: --comments='Energy at 50.  Phantom with no tube.'
        *NOTE: you must have either '  ' or "  " surrounding comments

-f --
-i --
-j --

-x --


FULL EXAMPLE:
python 2DmirrorScan.py 


# XPS Controller:
# STATIC IP: 192.168.0.254 (direct connect)
# DYNAMIC IP: "130.216.55.92"

#New Focus Picomotor Controller:
# STATIC IP: "130.216.55.52"

@authors: Jami L Johnson, Evan Rust
updated: January 2015
'''

import sys
import os
os.system('sudo chmod -R 0777 /dev/ttyS0') # set permissions of RS-232 serial port for vibrometer control
os.system('sudo chmod a+rw /dev/ttyS0')
#os.system('sudo chmod -R 0777 /dev/ttyUSB0')
#os.system('sudo chmod a+rw /dev/ttyUSB0')


from math import ceil, log
import matplotlib.pyplot as plt 
import numpy as np
from numpy import matrix
import getopt
import time
from obspy import read, Trace, UTCDateTime
from obspy.core.trace import Stats
from obspy.core import AttribDict
import re
import h5py
import obspyh5
from string import atoi
from time import sleep

# PLACE modules
import place.automate.osci_card.controller as card
#from place.automate.xps_control.XPS_C8_drivers import XPS
from Picomotor_Driver import pMot
from place.automate.polytec.vibrometer import Polytec, PolytecDecoder, PolytecSensorHead
from place.automate.quanta_ray.QRay_driver import QuantaRay, QSW, QRread, QRstatus, QRcomm
from place.automate.scan.scanFunctions import initialize, check
import Calibrate

def main():

    # parse command line options
    try:
        opts, args = getopt.getopt(sys.argv[1:],'h:r:t:c:a:w:v:z:u:l:q:y:p:o:n:d:g:k:e:m', ['help', 'sampleRate=', 'timeDuration=', 'channel=', 'averagedRecords=','waitTime','receiver=', 'sigLevel','vibChannel','trigLevel=','trigRange=','channelRange=','coupling=', 'ohms=', 'fileName=', 'decoder=', 'range=','map=', 'energy=','comments='])

    except getopt.error, msg:
        print msg
        print 'for help use --help'
        sys.exit(2)

    # default values
    global us, receiver # for keyboard interrupt handling

    sampleRate = 'SAMPLE_RATE_10MSPS'
    channel = 'CHANNEL_A'
    vibChannel = 'CHANNEL_B'
    averagedRecords = 64    
    duration = 256
    filename = 'TestScan.h5'
    GroupName1 = 'SingleH' #Rotating mirror
    waitTime = 0
    mapColor = 'gray'
    comments = ''
    portPolytec = '/dev/ttyS0'
    baudPolytec = 115200
    decoder = 'DD-300'
    drange = '5mm'
    energy = '0 mJ'
    ACcouple = False
    ohms=50
    trigLevel=1
    trigRange=4 
    channelRange='INPUT_RANGE_PM_2_V'
    us = 1e6
    timeDelay = 0
    maxFreq = '6MHz'
    minFreq = '0MHz'
    calib = 1
    calibUnit = 'null'
    sigLevel = 0.80 # vibrometer signal level
    receiver = 'polytec'
    calMeth = '2Corner'
    arraySizex = 100
    arraySizey = 100
    dx=100
    dy=100
    
   # process options
    for o, a in opts:
        if o in ("-h", "--help"):
            print __doc__
            sys.exit(0)
        if o in ("-r", "--sampleRate"):
            sampleRate = "SAMPLE_RATE_" + a + "SPS" 
        if o in ("-t", "--timeDuration"):
            duration = float(a)
        if o in ("-c", "--channel"):
            channel = "CHANNEL_" + str(a) 
        if o in ("-a", "--averagedRecords"):
            averagedRecords = int(a)
        if o in ('-w','--waitTime'):
            waitTime = float(a)
        if o in ('-v', '--receiver'):
            receiver = str(a)
        if o in ('-z', '--sigLevel'):
            sigLevel = float(a)
        if o in ('-u','--vibChannel'):
            vibChannel = "CHANNEL_" + str(a) 
        if o in ("-l", "--trigLevel"):
            trigLevel = float(a)
        if o in ("-q", "--trigRange"):
            trigRange = float(a)
        if o in ("-y", "--channelRange"):
            channelRange = "INPUT_RANGE_PM_" + str(a)
        if o in ("-p", "--coupling"):
            if a == 'AC':
                ACcouple = True
            elif a == 'DC':
                ACcouple = False
        if o in ("-o", "--ohms"):
            ohms = int(a)
        if o in ("-n", "--fileName"):
            filename = a + '.h5'
        if o in ("-d", "--decoder"):
            decoder = a
        if o in ("-g", "--range"):
            drange = a + '/s/V'
        if o in ("-k", "--map"):
            mapColor = str(a)
        if o in ("-e", "--energy"):
            energy = a + ' mJ'
        if o in ("-i","--Calibration"):
            if a == '2Corner':
                calMeth='2Corner'
        if o in ("-s","--array"):
            alist=arg.split(',')
            arraySizex=int(alist[0])
            if len(alist)==1:
                arraySizey = arraySizex
            else:
                arraySizey = int(alist[1])
        if o in ("-b","--resolution"):
            rlist=arg.split(',')
            dx = int(rlist[0])
            if len(rlist)==1:
                dy = dx
            else:
                dy = int(rlist[1])
        if o in ("-m", "--comments"):
            comments = a

    print vibChannel
    # -----------------------------------------------------
    # initialize instruments
    # -----------------------------------------------------

    #initialize picomotor controller
    controller = initialize().PicomotorController ('130.216.54.50')
    
    # initialize mirror x-axis motor
    xMot = initialize().PicoMotor(1)

    # initialize mirror y-axis motor
    yMot = initialize().PicoMotor(2)

    # initialize and set header information for receiver
    if receiver == 'polytec':
        [timeDelay, maxFreq, calib, calibUnit] = initialize().Polytec(portPolytec,baudPolytec, decoder, drange)
    elif receiver == 'gclad':
        maxFreq = '6MHz'
        minFreq = '50kHz'
        timeDelay = 0
        decoder = ''
        drange = ''
        calib = '1'
        calibUnit = 'V'
    elif receiver == 'paldv':
        maxFreq = ''
        minFreq = ''
        timeDelay = 0
        decoder = ''
        drange = ''
        calib = ''
        calibUnit = 'V'
        
    # initialize oscilloscope card
    [samples, control, vibSignal] = initialize().OsciCard(channel, vibChannel, sampleRate, duration, averagedRecords,trigLevel, trigRange, channelRange, ACcouple, ohms)
   

    #------------------------------------------------------
    #Calibrate Scan Area
    #------------------------------------------------------

    xi, dx, xf, yi, dy, yf = Calibrate(xMot, yMot)
   
    # initialize Quanta-Ray source laser
  #  traceTime = initialize().QuantaRay(energy, averagedRecords)

    
    # -----------------------------------------------------
    # initialize header
    # -----------------------------------------------------

    header = initialize().Header(averagedRecords=averagedRecords, channel=channel, ohms=ohms, receiver=receiver, decoder=decoder, drange=drange, timeDelay=timeDelay, energy=energy, maxFreq=maxFreq, minFreq=minFreq, x_position='0', x_unit='mm', y_position='0', y_unit='mm', calib=calib, calibUnit=calibUnit, comments=comments)

    # -----------------------------------------------------
    # perform scan
    # -----------------------------------------------------

    #mirror2D(channel, vibChannel, control, vibSignal, sigLevel, xMot, yMot, xi, dx, xf, yi, dy, yf, shotTime, waitTime, mapColor, filename, header, receiver)

    # -----------------------------------------------------
    # close instrument connections
    # -----------------------------------------------------

    controller.close()
    
    if receiver == 'polytec':
        Polytec().closeConnection()

    #QSW().set(cmd='SING') # turn laser to single shot
    #QuantaRay().off()
    #QuantaRay().closeConnection()
    
    exit() # quit main loop and exit Python


def mirror2D(channel, vibChannel, control, vibSignal, sigLevel,  xMot, yMot, xi, dx, xf, yi, dy, yf, shotTime, waitTime, mapColor, filename, header, receiver):   
    '''Scanning function for 2D mirror scan acquisition'''

  #  QuantaRay().getStatus() # send command to laser to keep watchdog happy

    print 'beginning scan...'
    times = control.getTimesOfRecord()
    dt = times[1]-times[0]
    dataArray = times
    
    totalTime = shotTime*totalShots

    # initialize scan variables/constants
    x = xi
    y = yi
    
    if receiver == 'polytec':
        PolytecSensorHead().autofocusVibrometer(span='Small')

    while x < xf+dx:
        xMot.move_abs(int(x))

        while y < yf+dy:
            yMot.move_abs(int(y))
            sleep(waitTime) #delay after stage movement
            average=Capture(channel, vibChannel, control, vibSignal, sigLevel, totalTraces, traceTime, totalShots, waitTime, mapColor, filename, header, receiver)
            SaveTrace(header,average,filename,times)
            totalTime = CalculateTime(totalTime, traceTime)
            y += dy

        x += dx
        y -= dy
        xMot.move_abs(int(x))

        while y > (yi-dy):
            yMot.move_abs(int(y))
            sleep(waitTime) # delay after stage movement
            average=Capture(channel,vibChannel, control, vibSignal, sigLevel, totalTraces, traceTime, totalShots, waitTime, mapColor, filename, header, receiver)
            SaveTrace(header,average,filename,times)
            totalTime = CalculateTime(totalTime, traceTime)
            y -= dy
        x += dx
        y += dy

    print 'scan complete!'
    print 'data saved as: ' + filename

def dataCapture(control, channel):
    #capture data
    control.startCapture()  
    control.readData()
    records = control.getDataRecordWise(channel)
    average = np.average(records,0)
    return  average

def SaveTrace(header, average, filename, times):
    # save current trace
    header.npts = len(average)
    trace = Trace(data=average,header=header)
    trace.write(filename,'H5',mode='a')
    return

def CalculateTime(totalTime, traceTime):
    #calculate time remaining
    totalTime -= traceTime
    hourLeft = int(totalTime/3600)
    lessHour = totalTime - hourLeft*3600
    minLeft = int(lessHour/60)
    secLeft = int(lessHour - minLeft*60)
    print str(hourLeft) + ':' + str(minLeft) + ':' + str(secLeft) + ' remaining'

    return totalTime
        


if __name__ == "__main__":
    try:
        while(True):
            main()
    except KeyboardInterrupt:
        print 'Keyboard Interrupt!  Instrument connections closing...'
        pMot(0).close()
        print 'Connection to XPS controller closed'
        #QSW().set(cmd='SING') # turn laser to single shot
        #QuantaRay().off()
        #QuantaRay().closeConnection()
        if receiver == 'polytec':
            Polytec().closeConnection()

