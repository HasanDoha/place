'''
Example program to acquire data for while scanning stage.
1. Controller is initialized
2. Stage is moved to initial (absolute) position
3. Data acquisition parameters are set
4. Averaged data for one stage position is recorded and saved to TXT file
5. Stage is moved one increment
6. (4-5) repeated through final stage position
7. Connection to stage is closed

TODO: plot trace each time stage is moved
TODO: update image plot each time stage is moved

This module provides an examples how the osciCard module could be used. 

It acquires a certain number of records at moments when an external trigger signal rises over 0 V and displays the 
average of all records.

Command line options can be used to alter the behavior:

-r --sampleRate=
        define the sample rate. Attention only certain values are possible (check AlazarCmd.py). Supply an integer with
        suffix, e.g. 100K for 10e5 samples per second or 1M for 10e6 samples per second.
-c --channel=
        define the channel that shall be recorded. Example: -c A for channel A.
-n --numberOfRecords=
        define the number of records that shall be averaged. Example: -n 100 to average 100 records.
-i --initialPosition=
        define the initial position for scan.  Example: -i 0 for a scan starting at position x = 0.
-d --increment=
        define increment for scan. Example: -d 1 for an increment of 1 mm
-f --finalPosition=
        define the final position for scan.  Example -f 10 for a scan ending at position x = 10 mm
FULL EXAMPLE 
python exampleAcquire_Average_Save.py -r 100K -c B --numberOfRecords=10 -xi 0 -dx 1 -xf 10

@author: henrik
'''
#To do: get multiple averaged records to save until total number are saved
#Acquire averaged trace, save, move controller: repeat.
#plot in background
#save trace as specific file type (drop down menu?)

import osciCard.controller as card
import matplotlib.pyplot as plt 
import numpy as np
from numpy import matrix
import sys
import getopt


def main():
    global GroupName 
    global Positioner
    global channel
    global samplerate
    global averagedRecords
    global basefilename
    global xi
    global dx
    global xf
 
    xi = 0
    dx = 1
    xf = 0

    GroupName = 'Group1'
    Positioner = 'Pos'
    #make the following inputs!
    averagedRecords = 50    
    basefilename = "testing"

    # parse command line options
    try:
        opts, args = getopt.getopt(sys.argv[1:], "hc:r:n:i:d:f", ["help", "sampleRate=", "numberOfRecords=", "channel=", "initialPosition=", "increment=", "finalPosition="])
    except getopt.error, msg:
        print msg
        print "for help use --help"
        sys.exit(2)
    # default values

   
    # process options
    for o, a in opts:
        if o in ("-h", "--help"):
            print __doc__
            sys.exit(0)
        if o in ("-r", "--sampleRate"):
            samplerate = "SAMPLE_RATE_" + a + "SPS"
        if o in ("-n", "--numberOfRecords"):
            averagedRecords = int(a)
        if o in ("-c", "--channel"):
            channel = "CHANNEL_" + a
        if o in ("-i", "--initialPosition"):
            xi = float(a)
        if o in ("-d", "--increment"):
            dx = float(a)
        if o in ("-f", "--finalPosition"):
            xf = float(a)
    if (xf-xi)%dx != 0:
        print 'ERROR: Scanning range does not divide equally into chosen increments.' 
        exit()
    print xi
    print dx
    print xf
    print averagedRecords
#    xi = 0 #initial position of stage
#    dx = 1 #increment for stage to move
#    xf = 10 #final stage position

    initializeController()
    initializeOsciCard()
    Scan()
    closeConnection()
'''    doStuff()


    
 
 
    control.startCapture()
    control.readData()
  
    fig = plt.figure()        
    ax = fig.add_subplot(111)
    ax.set_ylabel("Voltage [V]")
    ax.set_xlabel("Time [s]")
    fig.canvas.set_window_title("Last Trace Acquired")
    
    #numX = (xf-xi)+1
    #numY = 1024 #change to fit number of data samples?!
    #dataArray = np.zeros(shape=(numY,numX))
    dataArray = []
    x = xi
    #start for loop for stage 
    for x in range(xi,xf+1): 
         times = control.getTimesOfRecord()  # get the time of each sample in one record
         records = control.getDataRecordWise(channel)  # get the data in a list of records
         records = np.array(records)
         average = np.average(records, 0) 

         #save this trace to an array
         dataArray.append(average)
         
         # plot
         ax.plot(times, average)
         plt.show() 

         #next stage position
         x = x+dx 
         moveStage(socketId, x)

    
    #save file to TXT file
    finalArray = np.array(dataArray).T
    filename = basefilename + ".csv"
    print filename
    np.savetxt(filename, finalArray, delimiter=",")
    timesfilename = basefilename + "-times.csv"
    np.savetxt(timesfilename, times, delimiter=",")

    #Stop connection to controller
    xps.TCP_CloseSocket(socketId)
    print "connection to Controller finished."
''' 

def initializeController():
    from XPS_C8_drivers import XPS
    global xps
    global socketId

    xps = XPS()
    xps.GetLibraryVersion()

    #socketId = xps.TCP_ConnectToServer("130.216.54.129",5001,3)
    #Below: use for hardwire to controller
    socketId = xps.TCP_ConnectToServer("192.168.0.254",5001,3)
    print "connected to: ", socketId
    #print xps.CloseAllOtherSockets(socketId) #NEED ADMINISTRATIVE RIGHTS (ERROR -107)

    ControllerErr = xps.ControllerStatusGet(socketId)
    if ControllerErr[0] == 0:
        print 'Controller status successful'
    else:
        print 'Controller status failed: Error =', ControllerErr

    LogErr =  xps.Login(socketId, "Administrator", "Administrator")
    if LogErr[0] == 0:
        print 'login successful'
    else:
        print 'login failed: Error = ', LogErr

    xps.GroupKill(socketId, GroupName)
    InitializeGrpErr = xps.GroupInitialize(socketId, GroupName)
    if InitializeGrpErr[0] == 0:
        print 'group initialize successful'
    else:
        print 'group initialize failed: Error = ', InitializeGrpErr
    xps.GroupStatusGet(socketId, GroupName)
    
    HomeErr = xps.GroupHomeSearch(socketId, GroupName)
    if HomeErr[0] == 0:
        print 'home search successful'
    else:
        print 'home search failed: Error = ', HomeErr

    print "Controller is initialized."

def initializeOsciCard():
    global control

    control = card.TriggeredContinuousController()  # get card handle
    control.configureMode = True  # go in configureMode; variables can be set without telling the card about it
    control.createInput(channel=channel)  # record on channel A
    control.setSampleRate(samplerate)  # record with 1e6 samples per second
    control.setTrigger(sourceOfJ="TRIG_EXTERNAL")  # use external signal for trigger
    control.setTriggerTimeout(0.1)  # set trigger time out
    control.setRecordsPerCapture(averagedRecords)
    control.configureMode = False  # leave configureMode; startCapture will run functions that configure the card
    print 'Oscilloscope card is ready and parameters are set.'

def closeConnection():
    xps.TCP_CloseSocket(socketId)
    print "connection to Controller closed."

def Scan():   
    print 'Beginning scan'
    control.startCapture()
    control.readData()
    dataArray = []
    x = xi
    trace = 1
    totalTraces = int((xf-xi+1)/dx)
    while x < (xf+1): 
        print 'Trace number: ', trace, ' of', totalTraces
        xps.GroupMoveAbsolute(socketId, GroupName, [x])
        print 'x = ', x
        x += dx
        trace += 1
        print 'Recording...'
        times = control.getTimesOfRecord()  
        records = control.getDataRecordWise(channel)  
        records = np.array(records)
        average = np.average(records, 0) 
        fig = plt.figure()        
        
        ax = fig.add_subplot(111)
        ax.set_ylabel("Voltage [V]")
        ax.set_xlabel("Time [s]")
        fig.canvas.set_window_title("Last Trace Acquired")
        ax.plot(times, average)
        plt.draw()  
        #time.sleep(0.05)
        dataArray.append(average)
    #save file to TXT file
    filename = basefilename + ".csv"
    print 'Saving scan data to: ', filename, '.csv'
    finalArray = np.array(dataArray).T
    np.savetxt(filename, finalArray, delimiter=",")
    timesfilename = basefilename + "-times.csv"
    print 'Saving time vector to: ', timesfilename, '.csv'
    np.savetxt(timesfilename, times, delimiter=",")
    print 'Scan complete!'
     
if __name__ == "__main__":
    main()

#    print xps.GroupJogModeEnable(socketId, GroupName)
#    print xps.GroupJogParametersSet(socketId, GroupName, [0.05],[1.]) #velocity, acceleration 
#    print xps.GroupJogParametersSet(socketId, GroupName, [0.0],[1.]) #stop
#    print xps.GroupJogParametersSet(socketId, GroupName, [0.0],[1.]) #velocit
#    print xps.GroupJogModeDisable(socketId, GroupName)
#    print 'velocity and acceleration set'
#print PositionerSGammaParametersSet(socketId,GroupName + '.' + Positioner, 0.05,0,
  #  print xps.GroupMotionEnable(socketId,GroupName)
#    [Err, Vel, Acc, MinJerkT, MaxJerkT] = xps.PositionerSGammaParametersGet(socketId,GroupName + '.' + Positioner)
#    print Err, Vel, Acc, MinJerkT, MaxJerkT
#    xps.PositionerSGammaParametersSet(socketId,GroupName + '.' + Positioner, 0.05, Acc, MinJerkT, MaxJerkT)   
    #print xps.GatheringStopAndSave(socketId)
    #data= xps.GatheringDataGet(socketId, 1)
    #print xps.GatheringConfigurationGet(socketId)


